
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EtchedBorder;
import java.awt.*;

/**
 * The MenuSection class represents a panel for displaying a section of the menu.
 * This panel contains buttons for each menu item in the specified menu section.
 */
public class MenuSection extends JPanel {
    /** The IDs of the menu items in the section. */
    int[] menuItemIDs; 
    /** The names of the menu items. */
    String[] names;
    /** The prices of the menu items. */
    float[] prices;
    /** The name of the menu section. */
    String menuSectionName;
    /** The lower bound of the menu section. */
    int lowerBound;
    /** The upper bound of the menu section. */
    int upperBound;

    /**
     * Constructs a new MenuSection panel.
     * @param menuSectionName The name of the menu section.
     * @param lowerBound The lower bound of the menu section.
     * @param upperBound The upper bound of the menu section.
     */
    public MenuSection(String menuSectionName, int lowerBound, int upperBound) {
        this.menuSectionName = menuSectionName;
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
        
        addMenuItems();

        setLayout(new BorderLayout());
        JLabel label = new JLabel(menuSectionName);
        add(label, BorderLayout.NORTH);
        JPanel menuItems = new JPanel();
        add(menuItems, BorderLayout.CENTER);
        menuItems.setLayout(new GridLayout(0, 2));
        menuItems.setBorder(new EtchedBorder());

        // Add all menu items as buttons in the edit order panel
        for (int i = 0; i < menuItemIDs.length; i++) {
            String name = names[i];
            String nameAndPrice = name + ": $" + prices[i];
            JButton button = new JButton(nameAndPrice);
            button.addActionListener(new ButtonClickListener(name));
            button.setPreferredSize(new Dimension(300, 50));
            button.setFont(new Font("Arial", Font.PLAIN, 25));
            menuItems.add(button);
        }
    }

    /**
     * The ButtonClickListener class represents an action listener for menu item buttons.
     * This class handles the actions performed when a menu item button is clicked.
     */
    private class ButtonClickListener implements ActionListener {
        private String buttonName;

        /**
         * Constructs a new ButtonClickListener object.
         * @param buttonName The name of the menu item button associated with the listener.
         */
        public ButtonClickListener(String buttonName) {
            this.buttonName = buttonName;
        }

        /**
         * Handles the actions performed when a menu item button is clicked.
         * @param e The action event generated by clicking the button.
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            // Perform actions when the button is clicked

            int index = 0;
            for(index = 0; index < names.length; ++index){
                if(String.valueOf(names[index]) == buttonName){
                    break;
                }
            }
            
            float price = prices[index];
            String nameAndPrice = buttonName + " : $" + price;
            // Add to selectedMenuIDs
            int ID = menuItemIDs[index];
            Employee.selectedMenuIDs.add(ID);

            // Create a button & add it to current order panel to represent the item selected
            JButton button = new JButton(nameAndPrice);
            button.setPreferredSize(new Dimension(100, 50));
            button.setFont(new Font("Arial", Font.PLAIN, 20));
            Employee.upperOrderPanel.add(button);
            Employee.update();
            // ActionListener for selecting/deselecting items
            // ActionListener for selecting/deselecting items
            button.addActionListener(new ActionListener() {
                /**
                 * Invoked when the menu item button is clicked.
                 * This method toggles the selection state of the menu item, updating its background color accordingly,
                 * and adds or removes the menu item ID from the to-be deleted list.
                 * @param e The action event generated by clicking the button.
                 */
                @Override
                public void actionPerformed(ActionEvent e) {
                    if(button.getBackground() != Color.RED) {
                        // Change button color to indicate selection
                        button.setBackground(Color.RED);
                        // Add the ID to the to-be deleted list
                        Employee.toBeDeleted.add(ID);
                    }
                    else {
                        // Change button color to indicate deselection
                        button.setBackground(Color.LIGHT_GRAY);
                        // Remove the ID from the to-be deleted list
                        Employee.toBeDeleted.remove(Employee.toBeDeleted.indexOf(ID));
                    }
                }
            });

        }
    }

    /**
     * Retrieves the menu items for the section from the database.
     */
    private void addMenuItems() {
        sqlObjects.Menu menu = Employee.empCmds.getMenu(lowerBound,upperBound);
        this.menuItemIDs = menu.menuItemIDs;
        this.names = menu.names;
        this.prices = menu.prices;
    }
}